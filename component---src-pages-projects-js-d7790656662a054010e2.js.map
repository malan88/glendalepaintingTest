{"version":3,"sources":["webpack:///./src/components/projects/project.js","webpack:///./src/components/projects/projectsfilter.js","webpack:///./src/components/projects/projectspagination.js","webpack:///./src/pages/projects.js"],"names":["Project","data","slug","ProjectContainer","featuredImage","style","width","imgStyle","transition","fixed","childImageSharp","aspectRatio","to","HoverContainer","className","tags","styled","div","ProjectsFilter","selectedTab","setSelectedTab","tabSelected","repaint","FilterContainer","ButtonContainer","FilterButton","onClick","e","target","name","chosen","theme","black","size2","button","props","white","red","lightGray","ProjectsPagination","changePage","totalPages","chosenPage","pageNumbers","i","push","PaginateContainer","TextButton","color","map","number","PageButton","key","ProjectsPage","useState","currentProjects","setCurrentProjects","setChosenPage","displayedProjects","setDisplayedProjects","projects","allMarkdownRemark","edges","sort","a","b","node","frontmatter","title","useEffect","filteredProjects","filterSliced","filter","project","category","slice","ProjectsContainer","fields","page","window","scroll","Math","ceil","length","query"],"mappings":"sNAKaA,EAAU,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC5B,OACI,kBAACC,EAAD,KACKF,EAAKG,eACF,kBAAC,IAAD,CACIC,MAAO,CAAEC,MAAO,QAChBC,SAAU,CAACC,WAAY,2CACvBC,MAAK,iBACER,EAAKG,cAAcM,gBAAgBD,MADrC,CAEDE,YAAa,QAIzB,kBAAC,OAAD,CAAMC,GAAE,IAAMV,GACV,kBAACW,EAAD,CAAgBC,UAAU,QAAQb,EAAKc,SAMjDZ,EAAmBa,IAAOC,IAAV,+EAAGD,CAAH,8IAgBhBH,EAAiBG,IAAOC,IAAV,6EAAGD,CAAH,iHCtCPE,G,UAAiB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACtCC,EAAc,CACd,YAAY,EACZ,oBAAoB,EACpBC,SAAS,GAIb,OAFAD,EAAYF,IAAe,EAGvB,kBAACI,EAAD,KACI,kDACA,kBAACC,EAAD,KACI,kBAACC,EAAD,CACIC,QAAS,SAAAC,GAAC,OAAIP,EAAeO,EAAEC,OAAOC,OACtCA,KAAK,WACLvB,MAAM,QACNwB,OAAQT,EAAY,aAJxB,YAQA,kBAACI,EAAD,CACIC,QAAS,SAAAC,GAAC,OAAIP,EAAeO,EAAEC,OAAOC,OACtCA,KAAK,mBACLvB,MAAM,QACNwB,OAAQT,EAAY,qBAJxB,oBAQA,kBAACI,EAAD,CACIC,QAAS,SAAAC,GAAC,OAAIP,EAAeO,EAAEC,OAAOC,OACtCA,KAAK,UACLvB,MAAM,QACNwB,OAAQT,EAAW,SAJvB,2BAaVE,EAAkBP,IAAOC,IAAV,sFAAGD,CAAH,gDAGJ,qBAAGe,MAAkBC,SACjB,qBAAGD,MAAkBE,SAGpCT,EAAkBR,IAAOC,IAAV,sFAAGD,CAAH,iDAIfS,EAAeT,IAAOkB,OAAV,mFAAGlB,CAAH,oIAEL,SAAAmB,GAAK,OAAIA,EAAM7B,SACX,qBAAGyB,MAAkBE,SAEzB,qBAAGF,MAAkBK,SAChB,SAAAD,GAAK,OACfA,EAAML,OAASK,EAAMJ,MAAMM,IAAMF,EAAMJ,MAAMO,aC3DxCC,EAAqB,SAAC,GAM/B,IAFG,IAHHC,EAGE,EAHFA,WACAC,EAEE,EAFFA,WACAC,EACE,EADFA,WAEIC,EAAc,GACTC,EAAI,EAAGA,GAAKH,EAAYG,IAAKD,EAAYE,KAAKD,GACvD,OACI,kBAACE,EAAD,KACI,kBAACC,EAAD,CAAYrB,QAAS,kBAAMc,EAAW,IAAIQ,MAAM,SAAhD,SAGA,kBAACD,EAAD,CACIrB,QAAS,kBAAMc,EAAWE,EAAa,IACvCM,MAAM,SAFV,QAMCL,EAAYM,KAAI,SAAAC,GACb,OACI,kBAACC,EAAD,CACIrB,OAAQoB,IAAWR,EACnBU,IAAKF,EACLxB,QAAS,kBAAMc,EAAWU,KAEzBA,MAIb,kBAACH,EAAD,CAAYrB,QAAS,kBAAMc,EAAWE,EAAa,IAAIM,MAAM,OAA7D,QAGA,kBAACD,EAAD,CAAYrB,QAAS,kBAAMc,EAAWC,IAAaO,MAAM,OAAzD,SAONF,EAAoB9B,IAAOC,IAAV,4FAAGD,CAAH,2GASjBmC,EAAanC,IAAOkB,OAAV,qFAAGlB,CAAH,gIAGC,qBAAEe,MAAiBE,SACvB,gBAAEF,EAAF,EAAEA,MAAF,SAASD,OAAqBC,EAAMM,IAAMN,EAAMC,SASvDe,EAAa/B,IAAOkB,OAAV,qFAAGlB,CAAH,+HAEH,qBAAGe,MAAkBK,SACjB,qBAAGL,MAAkBE,SACd,gBAAGF,EAAH,EAAGA,MAAH,MACN,QADM,EAAUiB,MACRjB,EAAMM,IAAMN,EAAMC,S,sCCK7BqB,UAhEM,SAAC,GAAc,IAAZpD,EAAW,EAAXA,KAAW,EACeqD,mBAAS,IAAhDC,EADwB,KACPC,EADO,OAEKF,mBAAS,GAAtCZ,EAFwB,KAEZe,EAFY,OAGmBH,mBAAS,IAApDI,EAHwB,KAGLC,EAHK,OAIOL,mBAAS,YAAxCnC,EAJwB,KAIXC,EAJW,KAM3BwC,EAAW3D,EAAK4D,kBAAkBC,MAAMC,MAAK,SAACC,EAAGC,GAAJ,OAC7CD,EAAEE,KAAKC,YAAYC,MAAQH,EAAEC,KAAKC,YAAYC,MAAQ,GAAK,KAK/DC,qBAAU,WACN,IAAIC,EAWAC,GAV4BD,EAAZ,aAAhBnD,EAA+CyC,EAC1B,qBAAhBzC,EACcyC,EAASY,QACxB,SAAAC,GAAO,MACmC,qBAAtCA,EAAQP,KAAKC,YAAYO,YAGdd,EAASY,QACxB,SAAAC,GAAO,MAA0C,YAAtCA,EAAQP,KAAKC,YAAYO,aAERC,MAAM,EAd5B,IAednB,EAAmBc,GACnBX,EAAqBY,GACrBd,EAAc,KACf,CAACtC,EAlBc,GAkBYyC,IAU9B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKQ,MAAM,aACX,qDACA,kBAAC,EAAD,CACIjD,YAAaA,EACbC,eAAgBA,IAEpB,kBAACwD,EAAD,KACKlB,EAAkBT,KAAI,SAAAwB,GAAO,OAC1B,kBAAC,EAAD,CACIrB,IAAKqB,EAAQP,KAAKC,YAAYC,MAC9BnE,KAAMwE,EAAQP,KAAKC,YACnBjE,KAAMuE,EAAQP,KAAKW,OAAO3E,WAItC,kBAAC,EAAD,CACIsC,WA1BO,SAAAsC,GACfrB,EAAcqB,GACdnB,EACIJ,EAAgBoB,MAvBN,IAuB2BG,EAAO,GAvBlC,GAuBoDA,IAElEC,OAAOC,OAAO,EAAG,IAsBTvC,WAAYwC,KAAKC,KAAK3B,EAAgB4B,OA/ChC,IAgDNzC,WAAYA,MA1D5B,IAkEa0C,EAAK,aA6BZR,EAAoB5D,IAAOC,IAAV,kFAAGD,CAAH","file":"component---src-pages-projects-js-d7790656662a054010e2.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\n\nexport const Project = ({ data, slug }) => {\n    return (\n        <ProjectContainer>\n            {data.featuredImage && (\n                <Img\n                    style={{ width: '100%' }}\n                    imgStyle={{transition: 'opacity 0.5s ease 0s, transform 1s ease'}}\n                    fixed={{\n                        ...data.featuredImage.childImageSharp.fixed,\n                        aspectRatio: 1.5,\n                    }}\n                />\n            )}\n            <Link to={`/${slug}`}>\n                <HoverContainer className=\"mask\">{data.tags}</HoverContainer>\n            </Link>\n        </ProjectContainer>\n    );\n};\n\nconst ProjectContainer = styled.div`\n    width: 420px;\n    margin: 10px 10px;\n    height: auto;\n    position: relative;\n    overflow: hidden;\n\n    &:hover img {\n        transform: scale(1.2);\n    }\n\n    &:hover .mask {\n        opacity: 0.7;\n    }\n`;\n\nconst HoverContainer = styled.div`\n    position: absolute;\n    top: 0px;\n    background: rgba(0, 0, 0, 0.7);\n    height: 100%;\n    width: 100%;\n    opacity: 0;\n    transition: 0.5s ease;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ProjectsFilter = ({ selectedTab, setSelectedTab }) => {\n    let tabSelected = {\n        'show all': false,\n        'new construction': false,\n        repaint: false,\n    };\n    tabSelected[selectedTab] = true;\n\n    return (\n        <FilterContainer>\n            <h4>Filter by category</h4>\n            <ButtonContainer>\n                <FilterButton\n                    onClick={e => setSelectedTab(e.target.name)}\n                    name=\"show all\"\n                    width=\"120px\"\n                    chosen={tabSelected['show all']}\n                >\n                    SHOW ALL\n                </FilterButton>\n                <FilterButton\n                    onClick={e => setSelectedTab(e.target.name)}\n                    name=\"new construction\"\n                    width=\"240px\"\n                    chosen={tabSelected['new construction']}\n                >\n                    NEW CONSTRUCTION\n                </FilterButton>\n                <FilterButton\n                    onClick={e => setSelectedTab(e.target.name)}\n                    name=\"repaint\"\n                    width=\"240px\"\n                    chosen={tabSelected['repaint']}\n                >\n                    REPAINT/RESTORATION\n                </FilterButton>\n            </ButtonContainer>\n        </FilterContainer>\n    );\n};\n\nconst FilterContainer = styled.div`\n    margin: 0 auto;\n    h4 {\n        color: ${({ theme }) => theme.black};\n        font-size: ${({ theme }) => theme.size2};\n    }\n`;\nconst ButtonContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\nconst FilterButton = styled.button`\n    height: 50px;\n    width: ${props => props.width};\n    font-size: ${({ theme }) => theme.size2};\n    font-weight: 700;\n    color: ${({ theme }) => theme.white};\n    background: ${props =>\n        props.chosen ? props.theme.red : props.theme.lightGray};\n    border: none;\n    cursor: pointer;\n\n    &:focus {\n        outline: none;\n    }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ProjectsPagination = ({\n    changePage,\n    totalPages,\n    chosenPage,\n}) => {\n    let pageNumbers = [];\n    for (let i = 1; i <= totalPages; i++) pageNumbers.push(i);\n    return (\n        <PaginateContainer>\n            <TextButton onClick={() => changePage(1)} color=\"black\">\n                START\n            </TextButton>\n            <TextButton\n                onClick={() => changePage(chosenPage - 1)}\n                color=\"black\"\n            >\n                PREV\n            </TextButton>\n            {pageNumbers.map(number => {\n                return (\n                    <PageButton\n                        chosen={number === chosenPage}\n                        key={number}\n                        onClick={() => changePage(number)}\n                    >\n                        {number}\n                    </PageButton>\n                );\n            })}\n            <TextButton onClick={() => changePage(chosenPage + 1)} color=\"red\">\n                NEXT\n            </TextButton>\n            <TextButton onClick={() => changePage(totalPages)} color=\"red\">\n                END\n            </TextButton>\n        </PaginateContainer>\n    );\n};\n\nconst PaginateContainer = styled.div`\n    margin: 0 auto;\n    max-width: 600px;\n    display: flex;\n    justify-content: space-between;\n    height: 40px;\n    margin-top: 15px;\n`;\n\nconst PageButton = styled.button`\n    width: 40px;\n    background-color: #fff;\n    font-size: ${({theme}) => theme.size2};\n    color: ${({theme, chosen}) => chosen ? theme.red : theme.black};\n    border: none;\n    font-weight: 700;\n    cursor: pointer;\n    &:focus {\n        outline: none;\n    }\n`;\n\nconst TextButton = styled.button`\n    width: 75px;\n    color: ${({ theme }) => theme.white};\n    font-size: ${({ theme }) => theme.size2};\n    background-color: ${({ theme, color }) =>\n        color === 'red' ? theme.red : theme.black};\n    border: none;\n    cursor: pointer;\n    font-weight: 700;\n    &:focus {\n        outline: none;\n    }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Layout, SEO } from '../components/global';\nimport { graphql } from 'gatsby';\nimport {\n    Project,\n    ProjectsFilter,\n    ProjectsPagination,\n} from '../components/projects';\nimport styled from 'styled-components';\n\nconst ProjectsPage = ({ data }) => {\n    const [currentProjects, setCurrentProjects] = useState([]);\n    const [chosenPage, setChosenPage] = useState(1);\n    const [displayedProjects, setDisplayedProjects] = useState([]);\n    const [selectedTab, setSelectedTab] = useState('show all');\n\n    let projects = data.allMarkdownRemark.edges.sort((a, b) =>\n        a.node.frontmatter.title > b.node.frontmatter.title ? 1 : -1\n    );\n\n    let itemPerPage = 15;\n\n    useEffect(() => {\n        let filteredProjects;\n        if (selectedTab === 'show all') filteredProjects = projects;\n        else if (selectedTab === 'new construction')\n            filteredProjects = projects.filter(\n                project =>\n                    project.node.frontmatter.category === 'New Construction'\n            );\n        else\n            filteredProjects = projects.filter(\n                project => project.node.frontmatter.category === 'Repaint'\n            );\n        let filterSliced = filteredProjects.slice(0, itemPerPage);\n        setCurrentProjects(filteredProjects);\n        setDisplayedProjects(filterSliced);\n        setChosenPage(1);\n    }, [selectedTab, itemPerPage, projects]);\n\n    const changePage = page => {\n        setChosenPage(page);\n        setDisplayedProjects(\n            currentProjects.slice(itemPerPage * (page - 1), itemPerPage * page)\n        );\n        window.scroll(0, 0);\n    };\n\n    return (\n        <Layout>\n            <SEO title=\"Projects\" />\n            <h1>A Few of our Projects</h1>\n            <ProjectsFilter\n                selectedTab={selectedTab}\n                setSelectedTab={setSelectedTab}\n            />\n            <ProjectsContainer>\n                {displayedProjects.map(project => (\n                    <Project\n                        key={project.node.frontmatter.title}\n                        data={project.node.frontmatter}\n                        slug={project.node.fields.slug}\n                    />\n                ))}\n            </ProjectsContainer>\n            <ProjectsPagination\n                changePage={changePage}\n                totalPages={Math.ceil(currentProjects.length / itemPerPage)}\n                chosenPage={chosenPage}\n            />\n        </Layout>\n    );\n};\n\nexport default ProjectsPage;\n\nexport const query = graphql`\n    query {\n        allMarkdownRemark(\n            filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n        ) {\n            edges {\n                node {\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        category\n                        location\n                        tags\n                        title\n                        featuredImage {\n                            childImageSharp {\n                                fixed(quality: 100, width: 420, height: 280 ) {\n                                    ...GatsbyImageSharpFixed\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst ProjectsContainer = styled.div`\n    max-width: 1320px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-content: space-between;\n    margin: 0 auto;\n`;\n"],"sourceRoot":""}